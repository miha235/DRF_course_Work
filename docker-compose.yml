version: '3.8'

services:
  django:
    build: .
    container_name: django_app
    env_file: .env
    command: >
      sh -c "echo 'Waiting for database...' &&
      while ! nc -z db 5432; do sleep 1; done &&
      echo 'Database is ready. Starting Django...' &&
      gunicorn --bind 0.0.0.0:8000 config.wsgi:application"
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started

  db:
    image: postgres:15
    container_name: postgres_db
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: redis_cache
    restart: always
    ports:
      - "6379:6379"

  celery:
    build: .
    container_name: celery_worker
    env_file: .env
    command: >
      sh -c "echo 'Waiting for database...' &&
      while ! nc -z db 5432; do sleep 1; done &&
      echo 'Database is ready. Starting Celery worker...' &&
      celery -A config worker --loglevel=info"
    depends_on:
      db:
        condition: service_healthy
      django:
        condition: service_started
      redis:
        condition: service_started

  celery-beat:
    build: .
    container_name: celery_beat
    env_file: .env
    command: >
      sh -c "echo 'Waiting for database...' &&
      while ! nc -z db 5432; do sleep 1; done &&
      echo 'Database is ready. Starting Celery Beat...' &&
      celery -A config beat --loglevel=info"
    depends_on:
      db:
        condition: service_healthy
      django:
        condition: service_started
      redis:
        condition: service_started

volumes:
  postgres_data:
